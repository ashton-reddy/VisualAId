@page
@model IndexModel
@{
    ViewData["Title"] = "Home Page";
}

<div id="content" style="display:none">
    <table width="100%">
        <tr>
            <td></td>
            <td></td>
        </tr>
        <td></td>
        <td>
            <button id="startRecognizeAsyncButton">Start recognition</button>
            <button id="stopRecognizeAsyncButton">Stop recognition</button>
        </td>

        </tr>
        <tr>
            <td align="right" valign="top"></td>
            <td><textarea id="phraseDiv" style="display: inline-block;width:1002px;height:150px"></textarea></td>
        </tr>
    </table>
</div>

<div id="imageContainer">
    <table width="100%">
        <tr>
            <td style="width:500px">
                <img id="myImage" src="Blank.jpg" alt="Your Image">
            </td>
            <td style="width:500px"><textarea id="descriptionDiv" style="display: inline-block;width:500px;height:299px"></textarea></td>
        </tr>
</div>


<script>
    function SearchBingEntity(query) {
        const apiKey = 'ba21ac0dbfb64c6fa1ac0d316d72311a'; // Replace with your Bing API key
        const apiUrl = `https://api.bing.microsoft.com/v7.0/entities?mkt=en-US&q=${encodeURIComponent(query)}`;

        fetch(apiUrl, {
            headers: {
                'Ocp-Apim-Subscription-Key': apiKey,
            },
        })
            .then((response) => {
                if (response.status !== 200) {
                    console.log(`Error: ${response.status} - ${response.statusText}`);
                    return;
                }
                return response.json();
            })
            .then((data) => {

                const entities = data.entities;
                descriptionDiv.innerHTML = entities.value[0].description;
                
                // Set the image
                if (entities.value[0].image) {
                    var imageElement = document.getElementById('myImage');
                    imageElement.src = entities.value[0].image.hostPageUrl;
                } else {
                    SearchBingImage(query);

                }


            })
            .catch((error) => {
                console.error('Error:', error);
            });
    }

    function SearchBingImage(query) {
        const apiKey = 'ba21ac0dbfb64c6fa1ac0d316d72311a'; // Replace with your Bing API key
        const apiUrl = `https://api.bing.microsoft.com/v7.0/images/search?q=${encodeURIComponent(query)}`;

        fetch(apiUrl, {
            headers: {
                'Ocp-Apim-Subscription-Key': apiKey,
            },
        })
            .then((response) => {
                if (response.status !== 200) {
                    console.log(`Error: ${response.status} - ${response.statusText}`);
                    return;
                }
                return response.json();
            })
            .then((data) => {

                const images = data.value;

                // Check if there are images in the response
                if (images.length > 0) {
                    // Select the most relevant image (usually the first one in the list)
                    const mostRelevantImage = images[0];
                    var imageElement = document.getElementById('myImage');
                    imageElement.src = mostRelevantImage.contentUrl;
                } else {
                    console.log('No images found for the query.');
                }

            })
            .catch((error) => {
                console.error('Error:', error);
            });
    }

</script>

<script src="~/js/microsoft.cognitiveservices.speech.sdk.bundle.js"></script>

<script>
    // status fields and start button in UI
    var subscriptionKey = "374a01c7afc14078942664634616b406";
    var serviceRegion = "eastus";
    var phraseDiv;
    var startRecognizeAsyncButton;
    var stopRecognizeAsyncButton;
    var SpeechSDK;
    var recognizer;
    document.addEventListener("DOMContentLoaded", function () {
        startRecognizeAsyncButton = document.getElementById("startRecognizeAsyncButton");
        stopRecognizeAsyncButton = document.getElementById("stopRecognizeAsyncButton");
        stopRecognizeAsyncButton.disabled = true;
        phraseDiv = document.getElementById("phraseDiv");
        var speechConfig;
        speechConfig = SpeechSDK.SpeechConfig.fromSubscription(subscriptionKey, serviceRegion);
        speechConfig.speechRecognitionLanguage = "en-US";
        var audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();
        recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);

        startRecognizeAsyncButton.addEventListener("click", function () {
            startRecognizeAsyncButton.disabled = true;
            stopRecognizeAsyncButton.disabled = false;
            phraseDiv.innerHTML = "";

            recognizer.startContinuousRecognitionAsync();
            recognizer.recognized = function (s, e) {
                phraseDiv.innerHTML += e.result.text;
                SearchBingEntity(e.result.text);
            };
        });

        stopRecognizeAsyncButton.addEventListener("click", function () {
            startRecognizeAsyncButton.disabled = false;
            stopRecognizeAsyncButton.disabled = true;
            recognizer.stopContinuousRecognitionAsync();

        });
        if (!!window.SpeechSDK) {
            SpeechSDK = window.SpeechSDK;
            startRecognizeAsyncButton.disabled = false;
            document.getElementById('content').style.display = 'block';
            document.getElementById('warning').style.display = 'none';
            // in case we have a function for getting an authorization token, call it.
            if (typeof RequestAuthorizationToken === "function") {
                RequestAuthorizationToken();
            }
        }
    });
</script>


<!-- </quickstartcode> -->

